import nltk

# T√©l√©chargement des ressources n√©cessaires
nltk.download('punkt')         # Pour la tokenisation des phrases
nltk.download('stopwords')         # Pour la liste des mots vides
nltk.download('wordnet')           # Pour la lemmatisation
nltk.download('omw-1.4')           # Pour les donn√©es suppl√©mentaires de WordNet
nltk.download('averaged_perceptron_tagger')

from nltk.tokenize import word_tokenize, sent_tokenize

from nltk.corpus import stopwords

from nltk.stem import WordNetLemmatizer

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

import streamlit as st


with open('bookv2.txt', 'r', encoding='utf-8') as f :

    data = f.read().replace('\n', ' ')

# Tokeniser le texte en phrases

sentences = sent_tokenize(data, language="french")

# D√©finir une fonction pour pr√©traiter chaque phrase

def preprocess(sentence) :

    # Tokenize the sentence into words (Tokenisation de la phrase en mots)

    words = word_tokenize(sentence)

    return words



# Pr√©traitement de chaque phrase du texte

corpus = [preprocess(sentence) for sentence in sentences]

# Construction d'une matrice TF-IDF pour les phrases
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform([' '.join(sentence) for sentence in corpus])

def get_most_relevant_sentence_tfidf(query):
    # Transformer la requ√™te en vecteur TF-IDF
    query_vec = vectorizer.transform([' '.join(preprocess(query))])

    # Calculer les similarit√©s cosinus entre la requ√™te et les phrases
    similarities = cosine_similarity(query_vec, tfidf_matrix)

    # Trouver l'indice de la phrase la plus pertinente
    idx = similarities.argmax()

    # Retourner la phrase correspondante
    return ' '.join(corpus[idx])

def chatbot(question) :

    # Trouver la phrase la plus pertinente

    most_relevant_sentence = get_most_relevant_sentence_tfidf(question)

    # Retourne la r√©ponse

    return most_relevant_sentence
# Cr√©er une application Streamlit



st.title("Chatbot")

st.write("Bonjour ! Je suis un chatbot. Demandez-moi n'importe quoi sur le sujet de recommandation musicale.")
st.write("Je suis l√† pour vous r√©pondre. üòä")

    # Obtenir la question de l'utilisateur

question = st.text_input("Vous: ")

    # Cr√©er un bouton pour soumettre la question

if st.button("Envoyer"):

        # Appeler la fonction chatbot avec la question et afficher la r√©ponse

    response = chatbot(question)

        # Nettoyer la r√©ponse
    words = response.split(' ; ')  # S√©parer les mots
    sentence = ' '.join(words)  # Joindre les mots avec un espace

        # Capitaliser la premi√®re lettre et ajouter un point √† la fin
    sentence = sentence.capitalize() 
    if response=="":
        st.write("Desoler j'ai pas de reponse concernant cette reponse")
    else:
        st.write("Chatbot : " + sentence)


